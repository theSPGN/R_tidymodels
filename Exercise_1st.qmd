---
title: "Tidymodels Exercise First"
author: "Mateusz Zajda"
format: 
  html:
    toc: true
    toc-title: "contents"
    number-depth: 5
    number-sections: true
    code-fold: show
    code-summary: "Hide/Show code"
    code-tools: true
    code-block-border-left: "black"
    code-line-numbers: true
    code-copy: true
    html-math-method: katex
    smooth-scroll: true
    self-contained: true
    anchor-sections: true
    link-external-icon: true
    link-external-newwindow: true
    theme: 
      light: journal
      dark: darkly
    fontsize:  1.0em
    linestretch: 1.5
date: today
abstract-title: "About"
abstract: "Exercise **first**"
execute: 
  eval: true
  warning: false
  echo: true
  output: true
  error: false
editor_options: 
  chunk_output_type: console
---

```{=html}
<style type="text/css"> body {text-align: justify} </style>
```
## First exercise
The first exercise of Tidymodels tutorial demands creating a prediction model of ozone.
Examination of data can be proceed using ggally.

### Required packages

```{r}
library(tidymodels)
library(parsnip)
library(readr)       # data import
library(broom.mixed) # convert data
library(dotwhisker)  # visualization
library(GGally)      # plot correlations
```

### Data preparation

```{r}
colnames(airquality) <- tolower(colnames(airquality))

air <-
  airquality |>
  as_tibble() |>
  na.omit() |> 
  select(-day) |> 
  mutate(month = factor(month)) 

```

### Display correlations between variables

```{r}
#| label: ggpairs plot
#| layout-ncol: 1
#| fig-cap: "Drawing 1.1. ggpairs plot"
#| fig-cap-location: bottom
air |> GGally::ggpairs()
```

The figures above suggest that there is correlation between ozone-temp and ozone-wind

### Creating a linear model
```{r}
lm_mod <- 
  linear_reg() |> 
  set_engine("lm")

```

### Fitting the data to model

```{r}
lm_fit <-  
  lm_mod |>
  fit(ozone ~ (wind + temp + solar.r), data = air)

lm_fit$fit |>
  tidy() |>
  mutate(starts = signif_stars(p.value)) |> 
  gt::gt() |> 
  gt::fmt_number(decimals = 2) |> 
  gt::fmt_scientific(columns = c(p.value))
```

The table above shows that the 3 variables (wind, temp and solar.r) are good predictors for ozone value.

### Predictions
```{r}

new_points <- expand.grid(
  wind = seq(5, 15, 3),
  solar.r = seq(100, 400, 50),
  temp = seq(70, 100, 5)
)

mean_pred <- predict(object = lm_fit, new_data = new_points)
conf_pred <- predict(object = lm_fit, new_data = new_points, type = "conf_int")

# join cols on idx
lm_pred <- 
  new_points |> 
  bind_cols(mean_pred) |> 
  bind_cols(conf_pred)

# Data plot
lm_pred |>
  ggplot(aes(
    x = temp,
    y = .pred,
    color = factor(solar.r),
    group = factor(solar.r),
  )) +
  geom_point(position=position_dodge(width=4)) +
  geom_errorbar(aes(ymin = .pred_lower, ymax = .pred_upper),
                width = 0.05,
                position=position_dodge(width=4)) +
  theme_bw() +
  facet_wrap(~factor(wind)) +
  labs(y = "Predicted Ozone Levels",
       x = "Temperature",
       color = "Solar Radiation",
       size = "Wind Speed") +
  ggtitle("Predicted Ozone Levels with Temperature, Solar Radiation, and Wind Speed")
```

Ograniczyłem zbiór danych, umościłeś mnóstwo punktów w jednym miejscu. Wykres był nieczytelny.
Teraz jest kilka punktów do tego z odsunięciem `position`. Jest to klarowniejsze.  

## Other dataset:

Zastosowałem zupełnie inne rozwiązanie, ponieważ podzieliłeś zestaw danych na testowy i treningowy. Więc analiza powinna być inna. 

```{r}
set_diamonds <- ggplot2::diamonds |> 
  as_tibble() |>
  na.omit()

set.seed(213)

split <- initial_split(set_diamonds, prop = 0.99
                       )
train  <- training(split)
test <-  testing(split)


lm_mod <- 
  linear_reg() |> 
  set_engine("lm")

lm_fit <- 
  lm_mod |> 
  fit(price ~ carat + cut + color + clarity, data=train)

coefficients <- 
  lm_fit$fit |>  
  summary() |> 
  coefficients()

cbind(
  coefficients,
  signif_stars <- signif_stars(coefficients[, 4])
  ) |> knitr::kable()

new_points <- 
  test |> 
  select(carat,cut,color,clarity)

pred_train <- augment(lm_fit, new_data = train) |> mutate(set = "train")
pred_test <- augment(lm_fit, new_data = test) |> mutate(set = "test")

# join cols on idx

evaluation_set <- bind_rows(pred_train, pred_test)

evaluation_set |> 
  ggplot(aes(x = price, y = .pred, color = color, size = clarity)) +
  geom_point() +
  geom_abline(slope = c(1, 2, 0.5)) +
  theme_bw() +
  facet_wrap(~set) +
  labs(y = "Predicted Price", x = "Carat", color = "Color", size = "Clarity") +
  ggtitle("Predicted Diamond Prices with Carat, Color, and Clarity")
```

Because we didn't make any data preparation the model makes wrong predictions (price lower then 0). The step_dummy and others would be appreciated, but it's exercise 2nd part...
